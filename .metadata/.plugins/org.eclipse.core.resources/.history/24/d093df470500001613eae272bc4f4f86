package controlBola;

import static java.lang.String.format;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.api.Assertions;

/**
 * {@link PanelBola} specific assertions - Generated by CustomAssertionGenerator.
 */
public class PanelBolaAssert extends AbstractAssert<PanelBolaAssert, PanelBola> {

	/**
	 * Creates a new </code>{@link PanelBolaAssert}</code> to make assertions on actual PanelBola.
	 * @param actual the PanelBola we want to make assertions on.
	 */
	public PanelBolaAssert(PanelBola actual) {
		super(actual, PanelBolaAssert.class);
	}

	/**
	 * An entry point for PanelBolaAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
	 * With a static import, one's can write directly : <code>assertThat(myPanelBola)</code> and get specific assertion with code completion.
	 * @param actual the PanelBola we want to make assertions on.
	 * @return a new </code>{@link PanelBolaAssert}</code>
	 */
	public static PanelBolaAssert assertThat(PanelBola actual) {
		return new PanelBolaAssert(actual);
	}

	/**
	 * Verifies that the actual PanelBola's diffXInicio is equal to the given one.
	 * @param diffXInicio the given diffXInicio to compare the actual PanelBola's diffXInicio to.
	 * @return this assertion object.
	 * @throws AssertionError - if the actual PanelBola's diffXInicio is not equal to the given one.
	 */
	public PanelBolaAssert hasDiffXInicio(int diffXInicio) {
		// check that actual PanelBola we want to make assertions on is not null.
		isNotNull();

		// we overrides the default error message with a more explicit one
		String errorMessage = format("\nExpected <%s> diffXInicio to be:\n  <%s>\n but was:\n  <%s>", actual,
				diffXInicio, actual.getDiffXInicio());

		// check
		if (actual.getDiffXInicio() != diffXInicio) {
			throw new AssertionError(errorMessage);
		}

		// return the current assertion for method chaining
		return this;
	}

	/**
	 * Verifies that the actual PanelBola's diffYInicio is equal to the given one.
	 * @param diffYInicio the given diffYInicio to compare the actual PanelBola's diffYInicio to.
	 * @return this assertion object.
	 * @throws AssertionError - if the actual PanelBola's diffYInicio is not equal to the given one.
	 */
	public PanelBolaAssert hasDiffYInicio(int diffYInicio) {
		// check that actual PanelBola we want to make assertions on is not null.
		isNotNull();

		// we overrides the default error message with a more explicit one
		String errorMessage = format("\nExpected <%s> diffYInicio to be:\n  <%s>\n but was:\n  <%s>", actual,
				diffYInicio, actual.getDiffYInicio());

		// check
		if (actual.getDiffYInicio() != diffYInicio) {
			throw new AssertionError(errorMessage);
		}

		// return the current assertion for method chaining
		return this;
	}

	/**
	 * Verifies that the actual PanelBola's velocidad is equal to the given one.
	 * @param velocidad the given velocidad to compare the actual PanelBola's velocidad to.
	 * @return this assertion object.
	 * @throws AssertionError - if the actual PanelBola's velocidad is not equal to the given one.
	 */
	public PanelBolaAssert hasVelocidad(int velocidad) {
		// check that actual PanelBola we want to make assertions on is not null.
		isNotNull();

		// we overrides the default error message with a more explicit one
		String errorMessage = format("\nExpected <%s> velocidad to be:\n  <%s>\n but was:\n  <%s>", actual, velocidad,
				actual.getVelocidad());

		// check
		if (actual.getVelocidad() != velocidad) {
			throw new AssertionError(errorMessage);
		}

		// return the current assertion for method chaining
		return this;
	}

}
