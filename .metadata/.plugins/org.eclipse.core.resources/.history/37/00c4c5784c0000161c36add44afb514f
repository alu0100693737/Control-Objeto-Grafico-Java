package test.java;

import static java.lang.String.format;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.api.Assertions;

import controlBola.ControllerBola;
import controlBola.VistaControlBola;

/**
 * {@link ControllerBola} specific assertions - Generated by CustomAssertionGenerator.
 */
public class ControllerBolaAssert extends AbstractAssert<ControllerBolaAssert, ControllerBola> {

	/**
	 * Creates a new </code>{@link ControllerBolaAssert}</code> to make assertions on actual ControllerBola.
	 * @param actual the ControllerBola we want to make assertions on.
	 */
	public ControllerBolaAssert(ControllerBola actual) {
		super(actual, ControllerBolaAssert.class);
	}

	/**
	 * An entry point for ControllerBolaAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
	 * With a static import, one's can write directly : <code>assertThat(myControllerBola)</code> and get specific assertion with code completion.
	 * @param actual the ControllerBola we want to make assertions on.
	 * @return a new </code>{@link ControllerBolaAssert}</code>
	 */
	public static ControllerBolaAssert assertThat(ControllerBola actual) {
		return new ControllerBolaAssert(actual);
	}

	/**
	 * Verifies that the actual ControllerBola's ventanaBola is equal to the given one.
	 * @param ventanaBola the given ventanaBola to compare the actual ControllerBola's ventanaBola to.
	 * @return this assertion object.
	 * @throws AssertionError - if the actual ControllerBola's ventanaBola is not equal to the given one.
	 */
	public ControllerBolaAssert hasVentanaBola(VistaControlBola ventanaBola) {
		// check that actual ControllerBola we want to make assertions on is not null.
		isNotNull();

		// we overrides the default error message with a more explicit one
		String errorMessage = format("\nExpected <%s> ventanaBola to be:\n  <%s>\n but was:\n  <%s>", actual,
				ventanaBola, actual.getVentanaBola());

		// check
		if (!actual.getVentanaBola().equals(ventanaBola)) {
			throw new AssertionError(errorMessage);
		}

		// return the current assertion for method chaining
		return this;
	}

}
